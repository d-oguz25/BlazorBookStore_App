@using BlazorBookStore_App.Components.ModalComponents
@using BlazorBookStore_App.Components.Models
@using System.Threading
@using BlazorBookStore_App.Components.Services
@using Microsoft.EntityFrameworkCore.Metadata
@using System.Text.Json

@page "/bookList";


@inject FavouriteBooksState favouriteBooksState

<div class="container mt-4">
    <h2 class="text-center mb-4">Book List</h2>
    <div class="row">
        @foreach (var book in books)
        {
            <div class="col-md-3 mb-4">
                <div class="card h-100">
                    <img src="@book.ImageUrl" class="card-img-top" alt="@book.Title" />
                    <div class="card-body">
                        <h5 class="card-title">@book.Title</h5>
                        <p class="card-text text-muted">@book.Author</p>
                        <p class="card-text">@book.Description</p>
                    </div>
                    <div class="card-footer text-center">
                        <button class="btn btn-primary" @onclick="()=>OpenBookDetail(book)">See Details</button>
                        <button class="btn btn-primary" @onclick="()=>AddToFavourite(book)">Add To Favourite </button>

                    </div>
                </div>
            </div>
        }
    </div>
</div>


<BookDetailModal SelectedBook="SelectedBook" OnClose="CloseBookDetail"> </BookDetailModal>

@if(showToast){

    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" style="position: fixed; bottom: 20px; right: 20px;">
        <div class="toast-header">
            <strong class="mr-auto">Notification</strong>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" @onclick="CloseToast">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            The book has been added to your favorites!
        </div>
    </div>


}




@code {
    [Inject]
    private NavigationManager? navigationManager { get; set; }

    private List<Book> favouriteBooks = new();
    private bool showToast = false;
    private Book? SelectedBook;
    private void OpenBookDetail(Book book)
    {
        SelectedBook = book;
        
    }
    private void CloseBookDetail(){
        SelectedBook = null;
    }
    private string apiEndPoint = "Books/GetBooks";
    List<Book>? books = new();
    [Inject]
    private HttpClient? httpClient { get; set; }
    CancellationToken cancellationToken = new();
    const string PageTitle = "asdw";
    public async Task<List<Book>> GetBooks(int? perPage, int? pageNumber, int? categoryId = 0)
    { 
        int actualPerPage = perPage ?? 4; 
        int actualPageNumber = pageNumber ?? 1; 
        int pageIndex = (actualPageNumber - 1) * actualPerPage;

        var res = await httpClient.GetAsync(apiEndPoint, cancellationToken);
        if (res.IsSuccessStatusCode)
        {
            var json = await res.Content.ReadAsStringAsync();
            if (json != null)
            {
                books = JsonSerializer.Deserialize<List<Book>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true

                    })?.Where(b => b.CategoryId == 0 || b.CategoryId == categoryId).Skip(pageIndex).Take(actualPerPage).ToList();
            }


        }
        else
        {
            throw new Exception("err");
        }

        return books ?? new List<Book>();
    }

    private void AddToFavourite(Book book)
    {
        //Favori ekle
        favouriteBooksState.AddToFavourite(book);

        showToast = true;
        navigationManager.NavigateTo("/favouriteList");
    }
    private void CloseToast()
    {
        showToast = false;
    }



}
 


}

}
