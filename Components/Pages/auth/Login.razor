@page "/login"
@using System.ComponentModel.DataAnnotations
@using BlazorBookStore_App.Components.Models
@using COMMON.Models
@using SERVICE.Contracts
@using static SERVICE.Contracts.AuthUserEngine


<h3>Login</h3>
@inject UserState userState
@inject AuthUserEngine userEngine
@inject ILocalStorageService localStorage



<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator /> 
    <ValidationSummary />
    @if (!codeSent)
{

    <div> 
        <label for="username">Kullanıcı Adı:</label>
        <InputText id="username" @bind-Value="loginModel.UserName" class="form-control" />
        <ValidationMessage For="@(() => loginModel.UserName)" />
    </div>

    <div>
        <label for="password">Şifre:</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
            <button type="submit" class="btn btn-primary">Giriş Yap</button>
    </div>
}else{

    <div>
        <label>Doğrulama Kodu</label>
        <input @bind="verificationCode" type="text" class="form-control" />

        <button @onclick="HandleVerification" class="btn btn-success">Doğrula</button>
    </div>
}
  
</EditForm>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div> 
}

<CustomWarningToast showToast=toastRes Message=errorMessage> </CustomWarningToast>


    @code {
    public bool toastRes;
    private LoggedUser loginModel = new();
    private string? errorMessage;
    private string verificationCode { get; set; } = "123456";
    private bool codeSent = false;
    [Inject]
    NavigationManager navigationManager { get; set; }

    private async Task HandleLogin()
    {
        var loginSuccess = await userEngine.Login(loginModel);
        if (!loginSuccess)
        {
            errorMessage = "giriş başarısız";

        }  
        codeSent = true;
    }

    private async Task HandleVerification()
    {
        var currentUser = await userEngine.VerifyLoginCode(loginModel, verificationCode);
        if (currentUser?.IsAuthenticated == true)
        {
            userState.SetUser(currentUser);
        }
        await localStorage.SetItemAsync("user", currentUser);
        navigationManager.NavigateTo("/home");

    }




}


